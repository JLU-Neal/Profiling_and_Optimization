#include <unordered_map>
#include <vector>
#include <iostream>
#include<sstream>
#include<numeric>
#include<string>
#include <stdlib.h>
#include <stdio.h>
using namespace std;

/*
A bottle neck is detected when I use stringstream or to_string() to convert int to stringã€‚
So here I define a simple but efficient mapping from integer to string.
Warning: Now only limited integers are supported!
*/
const string& smallIntToString(unsigned int val);


/*
A subtable which is generated by the splitOn().

string sliceName: the value of columns which are splitted on

vector<vector<int>*>* groupedRows: a pointer of vector of pointers 
which are pointed to the specif row of the table. (Doing so to avoid
extra memory and invoking copy constructor of vector frequently)
*/
class SlicedTable
{
private:
    /* data */
    string sliceName;
    vector<vector<int>*>* groupedRows;
public:
    SlicedTable();
    SlicedTable(string sliceName, vector<vector<int>*>& groupedRows);
    SlicedTable(const SlicedTable& stb);
    const string toString();
    bool operator == (const SlicedTable& a) const;
    string getSliceName() const;
    vector<vector<int>*>* getGroupedRows() const;

    ~SlicedTable();
};

/*
A vector of SlcedTable. WHich is similary to its Java counterpart,
which store all the subtables.

vector<SlicedTable>* vtr_slt: pointer of vector of slicedTable
*/
class SlicedTableGroup
{
private:
    vector<SlicedTable>* vtr_slt;
public:
    SlicedTableGroup();
    SlicedTableGroup(vector<SlicedTable>& vtr_slt);
    bool operator == (const SlicedTableGroup& a) const;
    vector<SlicedTable>* getVTR_SLT() const;
    string toString() const;
    ~SlicedTableGroup();
};

/*
Class Table is similar to its Java counterpart,
store all the information, would be initialized during setup.
Warning: Now only the integer is supported.
*/
class Table
{
private:
    /* data */
    vector<vector<int>>* table;

public:
    friend class SlicedTable;
    Table();
    Table(vector<vector<int>>* table);
    void addRow(vector<int> row);
    string toString();
    SlicedTableGroup splitOn(vector<int>& cols);
    ~Table();
};
